{"version":3,"sources":["components/scoreKeeper/scoreKeeper.js","components/navbar/navbar.js","components/gameBoard/gameBoard.js","components/container/container.js","components/App.js","serviceWorker.js","index.js"],"names":["ScoreKeeper","props","react_default","a","createElement","className","current","high","Navbar","href","message","scoreKeeper","GameBoard","images","i","length","j","Math","floor","random","_ref","shuffle","allImages","map","img","onClick","e","handleClick","key","src","alt","currentClass","Container","gameBoard_gameBoard","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clicked","handleClickEvent","bind","assertThisInitialized","navbar","container","data","console","log","filter","setState","toConsumableArray","concat","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c915f23.chunk.js","sourcesContent":["import React from 'react'\n\nconst ScoreKeeper = (props) => {\n\n    return (\n        <div><h3 className=\"text-white\">Current: {props.current} | High Score: {props.high}</h3></div>\n    )\n\n}\n\nexport default ScoreKeeper","import React from 'react'\nimport ScoreKeeper from '../scoreKeeper/scoreKeeper'\n\n\nconst Navbar = (props) => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-info\" >\n            <a className=\"navbar-brand my-3\" href=\"/\"><h2>Clicky Game</h2></a>\n            <div className=\"mx-auto\">\n                <h2 className=\"text-center text-white\">{props.message}</h2>\n            </div>\n            <ScoreKeeper high={props.high} current={props.current}></ScoreKeeper>\n        </nav >\n\n    )\n}\n\n\nexport default Navbar;","import React from 'react'\nimport './gameBoard.css'\n\n\n\n\nconst GameBoard = (props) => {\n    const images = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]\n    shuffle(images)\n    const allImages = images.map(img => {\n        return <img className=\"p-3 img-fluid  img-thumbnail\" onClick={(e) => props.handleClick(e, img)} key={img} src={\"./images/\" + img + \".png\"} alt=\"test\"></img>\n    })\n    return (\n        <div className={'board text-center mt-3 '+ props.currentClass} > {allImages}</div>\n    )\n\n}\n\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\n\nexport default GameBoard;","import React from 'react'\nimport GameBoard from '../gameBoard/gameBoard'\n\n\n\nconst Container = (props) => {\n    return (\n        <div className=\"container\">\n            <GameBoard handleClick={props.handleClick} currentClass={props.currentClass}></GameBoard>\n        </div>\n\n    )\n}\n\n\nexport default Container;","import React, { Component } from 'react';\n// import './App.css';\nimport Navbar from './navbar/navbar'\nimport Container from './container/container'\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      clicked: [],\n      high: 0,\n      current: 0, \n      message:\"Click an image to start the Game\",\n      currentClass: \"none\"\n    }\n    this.handleClickEvent = this.handleClickEvent.bind(this);\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar high={this.state.high} current={this.state.current} message={this.state.message}/>\n        <Container handleClick={this.handleClickEvent} currentClass={this.state.currentClass} />\n      </div>\n    );\n  }\n\n  handleClickEvent(e, data) {\n    console.log(data)\n    const current = this.state.clicked.filter(img => data === img)\n    if (current.length === 0) {\n      //Image hasnt been clicked yet, add to curre\n      console.log(\"Not clicked yet\")\n      this.setState({ \n        current: this.state.current + 1, \n        high: (this.state.current === this.state.high ? this.state.high + 1 : this.state.high), \n        clicked: [...this.state.clicked, data], \n        message: \"Good Job, keep going...\",\n        currentClass: (this.state.clicked.length > 0? this.state.currentClass : \"None\")\n      })\n    }\n    else {\n      //Game Over\n      //Reset current and clicked array\n      this.setState({ current: 0, clicked: [], message: \"Game Over :(\", currentClass: \"animated shake\" }  )\n\n    }\n\n\n  }\n}\n\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}